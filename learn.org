* Source Code
** TODO redux
*** Learn Redux from its creator:
    Part 1: [[https://egghead.io/series/getting-started-with-redux][Getting Started with Redux]] (30 free videos)

    Part 2: [[https://egghead.io/courses/building-react-applications-with-idiomatic-redux][Building React Applications with Idiomatic Redux]] (27 free videos)

*** Adi's Codepen demo:
    [[https://codepen.io/adispring/pen/pwYmPZ][Redux: Writing a Counter Reducer]]

    [[https://codepen.io/adispring/pen/jwRWbq][Redux: Store Methods: getState(), dispatch(), and subscribe()]]

*** Soure code
    [[file:~/JavaScript/Github/redux/src/index.js::import%20applyMiddleware%20from%20'./applyMiddleware'][index.js]]

    [[file:~/JavaScript/Github/redux/src/createStore.js::import%20isPlainObject%20from%20'lodash/isPlainObject'][createStore.js]]

** TODO react-redux v5.2.0
*** Source code
    [[file:~/JavaScript/Github/react-redux/src/connect/connect.js::import%20connectAdvanced%20from%20'../components/connectAdvanced'][connect.js]]
    [[file:~/JavaScript/Github/react-redux/src/components/Provider.js::import%20{%20Component,%20Children%20}%20from%20'react'][Provider.js]]


    index.js

    connect/
      connect.js           
      mapDispatchToProps.js
      mapStateToProps.js   
      mergeProps.js        
      selectorFactory.js   
      verifySubselectors.js
      wrapMapToProps.js    

    components/
      Provider.js       
      connectAdvanced.js

    utils/
      PropTypes.js         
      Subscription.js      
      shallowEqual.js      
      verifyPlainObject.js 
      warning.js           
      wrapActionCreators.js

** TODO react
*** [[https://juejin.im/post/5983dfbcf265da3e2f7f32de][React源码解析(一):组件的实现与挂载]]
*** [[https://juejin.im/post/59ca03b9518825177c60d10b][React源码解析(二):组件的生命周期]]
*** [[https://juejin.im/post/59cc4c4bf265da0648446ce0][React源码解析(三):详解事务与队列]]
*** [[https://juejin.im/post/5a0cf54ff265da43333df2c4][React源码解析(四):事件系统]]
*** TODO React Virtual DOM
*** TODO React diff
* Emacs
** TODO org-mode
   - C-c C-x: org-mode command
   - C-c C-x M: insert todo heading
   - C-c C-t: Rotate the TODO state of the current item among
              (unmarked) -> TODO -> DONE -> (unmarked)
              The same rotation can also be done “remotely” from the agenda buffers with the t command key (see Agenda commands).
   - M-RET: spacemacs-org-mode-map-prefix
   - M-RET RET: insert todo heading
** TODO projectile
   [[http://projectile.readthedocs.io/en/latest/usage/][Cheatsheet]]
   - C-c p f: find file in project.
   - C-c p l: Display a list of all files in a direcotry.
   - C-c p s g: Run grep on the files in project.
   - C-c p b: Display a list of all project buffers currently open.
   - C-c p e: Shows a list of recently visited project files.
   - C-c p !: Runs shell-command in the root directory of the project.
   - C-c p p: Display a list of known projects you can switch to.
   - C-c p C-h: Projectile help
** TODO Haskell
   - C-c C-b: runs the command haskell-interactive-switch. 
** Frames
   - [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Frames.html][Document]]
** TODO Spacemacs-ABC
   - M-m h SPC: helm-spacemacs-help
   - M-m h .: helm-spacemacs-help-dotspacemacs
   - M-m h l: helm-spacemacs-help-layers
   - M-m h f: helm-spacemacs-help-faq
   - M-m h p: helm-spacemacs-help-packages
   - M-m h r: helm-spacemacs-help-docs
   - M-m h t: helm-spacemacs-help-toggles
   - M-m M-g: runs the command find-file-at-point (found in spacemacs-default-map-root-map), 
              which is an interactive autoloaded compiled Lisp function in
              ‘ffap.el’. It is bound to M-m M-g.
   - C-M \: auto indent
   - M-m w: +windows
     - p: +popup
       - m: popwin:message
       - p: popwin:close-popup-window

** TODO Emacs-Cursor-Move
   - M-r: move-to-window-line-top-bottom
   - C-l: recenter-top-bottom
   - C-x C-SPC: pop-global-mark, Pop off global mark ring and jump to the top location.

* JavaScript
** ES6+
*** TODO export { default as xxx } from '...' ramda 的 import 机制有没有问题，在代码压缩的时候。研究一下
     export 和 import 的原理

** TODO yield generator promise async await 用法、原理

** prototype
** TODO Event Loop 原理学习
* Category Theory
** TODO 写一篇关于各种学过的范畴论的概念的简洁和索引。力求简洁易懂
   - Category definition & properties
     - Natural transformatin: Morphism between Functors
** TODO 翻译[[https://en.wikibooks.org/wiki/Haskell/Continuation_passing_style][Haskell/Continuation_passing_style]]
* Node
** [[http://www.ruanyifeng.com/blog/2015/05/require.html][require]]: 
   - require 查找顺序：缓存, 取出，返回 -> 内置模块，返回 -> 生成模块实例，存入缓存 -> 加载模块 -> 输出模块的 exports
   - require.resolve() 输出文件绝对路径
** TODO [[https://nodejs.org/dist/latest-v8.x/docs/api/stream.html][stream]]
* Webpack
** Loader
*** TODO style-loader
*** TODO css-loader
*** TODO [[https://webpack.js.org/api/loaders/][Loader Api]]
** Plugin
*** DONE [[https://github.com/webpack/docs/wiki/plugins][how to write a plugin]]
    CLOSED: [2018-01-30 Tue 17:25]
*** TODO [[https://github.com/webpack/docs/wiki/how-to-write-a-plugin#basic-plugin-architecture][plugins introduction]]
** [[https://webpack.js.org/guides/code-splitting/][Code Splitting]]
   - *Entry Points*: Manually split code using entry configuration.
   - *Prevent Duplication*: Use the CommonsChunkPlugin to dedupe and split chunks.
   - *Dynamic Imports*: Split code via inline function calls within modules.
** [[https://github.com/wenbing/webpack-bbq][webpack-bbq]]


* Ramda
** TODO Ramda APIs 按照类别串讲一遍，录屏
   - 函数组合：
     - 一等函数、高阶函数；一种不太优雅的函数传递
     - 纯函数 
     - 函数柯里化
     - 函数组合
   - 数据处理：对函数组合和柯里化的应用，参考《JS函数式编程指南》第五章联系题
   - Ramda 在 React/Redux 中的应用
     - mapStateToProps
     - reducerCreator
** TODO 翻译 ramda 这篇文章：[[http://fr.umio.us/the-philosophy-of-ramda/#header][The Philosophy of Ramda]]
* Haskell
* Codepen
  - [[https://blog.codepen.io/documentation/editor/key-bindings/][key-bindings]] 
